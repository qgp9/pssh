#!/usr/bin/env python3

import yaml
import re
from functools import reduce

def gen_fields_list(names):
  fields = [ re.findall(r'^(?:(\w+)\|)?(.+)', name)[0] for name in names ]
  return {
    'long': [ name[1] for name in fields ],
    'short': [ name[0] for name in fields ],
    'map': { name[0]: name[1] for name in fields if name[0] } | { name[1]: name[1] for name in fields }
  }

class Host:
  field_orders = ['hostname', 'identity_file', 'ssh_options']
  fields_of_list = gen_fields_list(['a|aliases', 'g|groups', 'o|ssh_options', 'ssh_options_post', 'others'])
  fields_of_str = gen_fields_list(['h|hostname', 'group', 'i|identity_file', 'u|username', 'p|port', 'raw'])

  def __init__(self):
    for attr in Host.fields_of_list['long']:
      setattr(self, attr, [])
    for attr in Host.fields_of_str['long']:
      setattr(self, attr, None)

  def add(self, item, value):
    if item in Host.fields_of_list['map']:
      getattr(self, Host.fields_of_list['map'][item]).append(value)
    elif item in Host.fields_of_str['map']:
      setattr(self, Host.fields_of_str['map'][item], value)
    elif item:
      self.others.append({ item: value })

  def handle_raw(self, raw):
    self.add('raw', raw)
    if isinstance(raw, dict):
      for k, v in raw.items():
        self.add('aliases', k)
        if isinstance(v, dict):
          self.handle_dict(v)
        elif isinstance(v, str):
          self.handle_str(v)
        else:
          raise Exception('Unknown type: ' + str(type(v)))
    elif isinstance(raw, str):
      self.handle_str(raw)
    else:
      raise Exception('Unknown type: ' + str(type(raw)))

  def handle_dict(self, host_dict):
    for k, v in host_dict.items():
      if k[0].isupper():
        self.add('ssh_options', k + ' ' + v)
      else:
        self.add(k, v)

  def handle_str(self, host_str):
    # Split lines by newline and dash
    rows = re.split(r'\s*[\r\n]+(?:\s*-\s+)?|\s+-\s+', host_str)
    for row in rows:
      s = row.strip()
      # If any line starts with an uppercase letter, it is an ssh option
      if s and s[0].isupper():
        self.add('ssh_options', s)
      elif s and s[0] == '#':
        continue
      else:
        # Otherwise, it is a fields
        # Split fields by space, comma, or double quotes
        # FIXME: single quote?
        fields = re.findall(r'(?:[^\s,"]|"(?:\\.|[^"])*")+', s)
        for j in range(len(fields)):
          k = j if j < len(Host.field_orders) else -1
          self.handle_field_str(fields[j].strip(), Host.field_orders[k])
          # FIXME: different behavior from second line without expected option?

  def handle_field_str(self, raw, expected):
    s = raw
    ss = strip_quotes(s)
    if ss[0].isupper():
      self.add('ssh_options', ss)
      return
    elif ss[0] == '#':
      return
    args = ss.split('=', 2)
    if len(args) == 2:
      self.add(args[0], strip_quotes(args[1]))
    else:
      self.add(expected, s)

  def to_ssh_config(self):
    res = [] 
    if self.aliases:
      res.append('Host ' + ' '.join(self.aliases))
      if self.hostname:
        res.append('  HostName ' + self.hostname)
    elif self.hostname:
      res.append('Host ' + self.hostname)

    if self.identity_file:
      res.append('  IdentityFile ' + self.identity_file)
    if self.username:
      res.append('  User ' + self.username)
    if self.port:
      res.append('  Port ' + self.port)
    if self.ssh_options:
      for opt in self.ssh_options:
        s = opt.strip()
        if re.match(r'^Host\s', s):
          res.append(s)
        else:
          res.append('  ' + s)
    return "\n".join(res)

class Parser:
  def __init__(self, filename):
    self.filename = filename
    self.hosts = []
    self.groups = []
    self.vars = {}

  def handle_vars_in_tree(self, obj):
    if isinstance(obj, dict):
      return { k: self.handle_vars_in_tree(v) for k, v in obj.items()}
    elif isinstance(obj, list):
      return [ self.handle_vars_in_tree(item) for item in obj ]
    elif isinstance(obj, str):
      return self.handle_vars_in_string(obj)
    return obj

  def parse(self):
    with open(self.filename) as f:
      yaml_data = yaml.load(f, Loader=yaml.SafeLoader)

    # Read special keys first; :vars
    for items in yaml_data:
      for k, v in items.items():
        k = nomarize_group_name(k)
        if k.startswith(':'):
          self.handle_special_key(k, v)

    # Handle variables
    yaml_data = self.handle_vars_in_tree(yaml_data)
  
    # Parse hosts
    for items in yaml_data:
      for k, v in items.items():
        k = nomarize_group_name(k)
        if not k.startswith(':'):
          self.handle_hosts(k, v)

  def handle_hosts(self, group_name, hosts):
    self.groups.append(group_name)
    for item in hosts:
      host = Host()
      host.add('group', group_name)
      host.handle_raw(item)
      self.hosts.append(host)

  def handle_special_key(self, key, value):
    if key == ':vars':
      if isinstance(value, dict):
        self.vars |= value
      elif isinstance(value, list):
        self.vars |= { k: v for dic in value for k, v in dic.items()}
      else:
        print("ERROR: vars should be dictionary or list")
        exit(1) # TODO
    else:
      # TODO: handle other special keys or give warning
      return None

  def handle_vars_in_string(self, raw):
    for var_name in re.findall(r'\$(\w+)', raw):
      if var_name in self.vars:
        raw = raw.replace('$' + var_name, self.vars[var_name])
      else:
        pass
    return raw
  
  def post_process(self):
    for host in self.hosts:
      if not host.hostname:
        continue
      found = re.findall(r'^(?:(\S+?)@)?([^:\s]+)(?::(\S+))?$', host.hostname)
      args = found[0]
      if args[0]:
        host.username = args[0]
      if args[1]:
        host.hostname = args[1]
      if args[2]:
        host.port = args[2]

      if host.username is not None:
        host.ssh_options_post.append('User ' + host.username)
      if host.port is not None:
        host.ssh_options_post.append('Port ' + host.port)
      if host.identity_file is not None:
        host.ssh_options_post.append('IdentityFile ' + host.identity_file)

  def to_ssh_config(self):
    res = []
    for group in self.groups:
      res.append('## GROUP: ' + group)
      for host in self.hosts:
        if host.group == group:
          res.append(host.to_ssh_config())
          res.append('')
      res.append('')
    print("\n".join(res))
      
  def print(self):
    for host in self.hosts:
      host.print()
 
def nomarize_group_name(group_name):
  return re.sub(r'(^[^:\w]+)|([^\w]+$)', '', group_name).replace('\s+', '-')

def strip_quotes(s):
  return s.strip('"\'').strip()

def main():
  parser = Parser('pssh.yml')
  parser.parse()
  parser.post_process()
  #parser.print()
  parser.to_ssh_config()

if __name__ == '__main__':
  main()
