#!/usr/bin/env python3

import yaml
import csv
import re
import pprint
pp = pprint.PrettyPrinter(indent=4)

vars = {}
groups = []

class Host:
  field_orders = ['hostname', 'identity_file', 'ssh_options']

  def __init__(self):
    self.aliases = []
    self.group = []
    self.groups = []
    self.hostname = None
    self.identity_file = None
    self.username = None
    self.other_options = []
    self.port = None
    self.ssh_options = []
    self.ssh_options_post = []
    self.raw = None

  def print(self):
    pp.pprint(self.__dict__)

  def add(self, item, value):
    if item in ['a', 'aliases']:
      self.aliases.append(value)
    elif item in ['group']:
      self.group = value
    elif item in ['g', 'groups']:
      self.groups.append(value)
    elif item in ['h', 'hostname']:
      self.hostname = value
    elif item in ['i', 'identity_file']:
      self.identity_file = value
    elif item in ['o', 'ssh_options']:
      self.ssh_options.append(value)
    elif item in ['p', 'port']:
      self.port = value
    elif item in ['u', 'username']:
      self.username = value
    elif item == 'raw':
      self.raw = value
    else:
      self.other_options.append({ item: value })

  def to_ssh_config(self):
    res = [] 
    if self.aliases and self.hostname:
      res.append('Host ' + ' '.join(self.aliases))
      res.append('  HostName ' + self.hostname)
    elif not self.aliases and self.hostname:
      res.append('Host ' + self.hostname)
    elif self.aliases and not self.hostname:
      res.append('Host ' + ' '.join(self.aliases))
      res.append('  HostName ' + self.aliases[0])
    else:
      pass # do nothinggg

    if self.identity_file:
      res.append('  IdentityFile ' + self.identity_file)
    if self.username:
      res.append('  User ' + self.username)
    if self.port:
      res.append('  Port ' + self.port)
    if self.ssh_options:
      for opt in self.ssh_options:
        s = opt.strip()
        if re.match(r'^Host\s', s):
          res.append(s)
        else:
          res.append('  ' + s)
    return "\n".join(res)

class Parser:
  def __init__(self, filename):
    self.filename = filename
    self.hosts = []
    self.groups = []
    self.vars = {}

  def parse(self):
    with open(self.filename) as f:
      yaml_data = yaml.load(f, Loader=yaml.SafeLoader)

    # Read special keys first; :vars
    for items in yaml_data:
      for k, v in items.items():
        k = nomarize_group_name(k)
        if k.startswith(':'):
          self.handle_special_key(k, v)
  
    for items in yaml_data:
      for k, v in items.items():
        k = nomarize_group_name(k)
        if not k.startswith(':'):
          self.handle_hosts(k, v)

  def handle_hosts(self, group_name, hosts):
    self.groups.append(group_name)
    for item in hosts:
      host = Host()
      host.add('group', group_name)
      host.add('raw', item)
      if isinstance(item, dict):
        for k, v in item.items():
          host.add('aliases', k)
          if isinstance(v, list):
            print ("DEBUG: LIST: ",v)
          elif isinstance(v, dict):
            self.handle_host_dict(v, host)
          elif isinstance(v, str):
            self.handle_host_str(v, host)
      elif isinstance(item, str):
        self.handle_host_str(item, host)
      else:
        print("ERROR: host should be dictionary")
        pp.pprint(item)
        exit(1) # TODO
      self.hosts.append(host)

  def handle_host_dict(self, host_dict, host):
    for k, v in host_dict.items():
      if k[0].isupper():
        host.add('ssh_options', k + ' ' + v)
      else:
        host.add(k, v)
  
  def handle_host_str(self, host_str, host):
    #rows = host_str.splitlines()
    rows = re.split(r'\s*[\r\n]+|\s+-\s+', host_str)
    for i in range(len(rows)):
      s = rows[i].strip()
      # If any line starts with an uppercase letter, it is an ssh option
      if s and s[0].isupper():
        host.add('ssh_options', s)
      elif s and s[0] == '#':
        continue
      else:
        # Otherwise, it is a fields
        fields=re.findall(r'(?:[^\s,"]|"(?:\\.|[^"])*")+', s)
        for j in range(len(fields)):
          k = j if j < len(Host.field_orders) else -1
          self.handle_field_str(fields[j].strip(), host, Host.field_orders[k])
          # FIXME: different behavior from second line without expected option?

  def handle_field_str(self, raw, host, expected):
    s = self.handle_vars_in_string(raw)
    ss = strip_quotes(s)
    if ss[0].isupper():
      host.add('ssh_options', ss)
      return
    elif ss[0] == '#':
      return
    args = ss.split('=', 2)
    if len(args) == 2:
      host.add(args[0], strip_quotes(args[1]))
    else:
      host.add(expected, s)

  def handle_special_key(self, key, value):
    if key == ':vars':
      if isinstance(value, dict):
        for k, v in value.items():
          self.vars[k] = v
      elif isinstance(value, list):
        for v in value:
          if isinstance(v, dict):
            for k, v in v.items():
              self.vars[k] = v
          else:
            print("ERROR: each var should be dictionary")
            exit(1) # TODO
      else:
        print("ERROR: vars should be dictionary or list")
        exit(1) # TODO
    else:
      # TODO: handle other special keys or give warning
      return None

  def handle_vars_in_string(self, raw):
    for var_name in re.findall(r'\$(\w+)', raw):
      if var_name in self.vars:
        raw = raw.replace('$' + var_name, self.vars[var_name])
      else:
        print("ERROR: Undefined variable: " + var_name)
        exit(1)
    return raw
  
  def post_process(self):
    for host in self.hosts:
      if not host.hostname:
        continue
      found = re.findall(r'^(?:(\S+?)@)?([^:\s]+)(?::(\S+))?$', host.hostname)
      args = found[0]
      if args[0]:
        host.username = args[0]
      if args[1]:
        host.hostname = args[1]
      if args[2]:
        host.port = args[2]

      if host.username is not None:
        host.ssh_options_post.append('User ' + host.username)
      if host.port is not None:
        host.ssh_options_post.append('Port ' + host.port)
      if host.identity_file is not None:
        host.ssh_options_post.append('IdentityFile ' + host.identity_file)

  def to_ssh_config(self):
    res = []
    for group in self.groups:
      res.append('## GROUP: ' + group)
      for host in self.hosts:
        if host.group == group:
          res.append(host.to_ssh_config())
          res.append('')
      res.append('')
    print("\n".join(res))
      
  def print(self):
    for host in self.hosts:
      host.print()
      

def nomarize_group_name(group_name):
  return re.sub(r'(^[^:\w]+)|([^\w]+$)', '', group_name).replace('\s+', '-')

def strip_quotes(s):
  return s.strip('"\'').strip()


def main():
  parser = Parser('pssh.yml')
  parser.parse()
  parser.post_process()
  #parser.print()
  parser.to_ssh_config()

if __name__ == '__main__':
  main()

